{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://smart-webcomponents-angular/grid/smart.element.ts","ng://smart-webcomponents-angular/grid/smart.grid.ts","ng://smart-webcomponents-angular/grid/smart.grid.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","this","n","v","op","TypeError","call","pop","push","BaseElement","ref","onCreate","EventEmitter","onReady","onAttach","onDetach","that","nativeElement","onAttached","emit","onDetached","prototype","addEventListener","type","listener","options","removeEventListener","dispatchEvent","event","blur","click","focus","locale","undefined","localizeFormatFunction","messages","rightToLeft","theme","tslib_1.__decorate","Output","Input","Smart","window","GridComponent","_this","_super","eventHandlers","onBeginEdit","onChange","onColumnClick","onColumnDoubleClick","onColumnResize","onColumnDragStart","onColumnDragging","onColumnDragEnd","onRowDragStart","onRowDragging","onRowDragEnd","onRowExpand","onRowCollapse","onRowClick","onRowDoubleClick","onRowResize","onCellClick","onCellDoubleClick","onEndEdit","onFilter","onResize","onRowTap","onCellTap","onPage","onSort","onScrollBottomReached","onScrollTopReached","__","constructor","create","tslib_1.__extends","createComponent","properties","propertyName","document","createElement","appearance","behavior","layout","clipboard","columns","columnMenu","columnGroups","charting","checkBoxes","dataExport","dataSource","editing","filtering","grouping","onCellValue","onCellUpdate","onCellRender","onBeforeInit","onInit","onAfterInit","onChartInit","onRender","onKey","onRowInit","onRowDetailInit","onRowDetailUpdated","onRowInserted","onRowRemoved","onRowUpdate","onRowUpdated","onColumnInit","onColumnInserted","onColumnRemoved","onColumnUpdated","onCommand","paging","pager","rowDetail","scrolling","columnHeader","summaryRow","groupHeader","header","footer","rows","selection","sorting","addNewRow","position","whenRendered","getResultOnRender","_a","addUnboundRow","count","addFilter","dataField","filter","refreshFilters","isRendered","autoSizeRows","autoSizeColumns","beginUpdate","beginEdit","rowId","clearFilter","clearSelection","cancelEdit","checkRow","checkAllRows","clearRows","closeMenu","collapseRow","collapseAllRows","createChart","deleteRow","ensureVisible","endEdit","endUpdate","refresh","expandRow","expandAllRows","exportData","Dataformat","getSortedColumns","getSelection","getFilteredColumns","getVisibleRows","getViewRows","getBatchEditChanges","hasMenu","hideDetail","openMenu","print","refreshView","removeFilter","revertBatchEdit","saveBatchEdit","select","selectRange","endRowId","endDataField","showDetail","unselect","uncheckRow","uncheckAllRows","toggleRow","ngOnInit","ngAfterViewInit","Render","listen","ngOnDestroy","unlisten","ngOnChanges","changes","propName","currentValue","onfilterHandler","ElementRef","Directive","selector","GridModule","NgModule","declarations","schemas","CUSTOM_ELEMENTS_SCHEMA","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","\ndeclare global {\n    interface Window {\n        Smart: any;\n}\n}\n\n\nimport { ElementRef, Input, Output, EventEmitter } from '@angular/core';\nimport { ElementRenderMode } from './../index';\n\nexport class BaseElement {\n    constructor(ref: ElementRef) {\n        const that = this;\n        this.nativeElement = ref.nativeElement as any;\n\n        that.nativeElement.onAttached = () => {\n            that.onAttach.emit(that.nativeElement);\n        }\n\n        that.nativeElement.onDetached = () => {\n            that.onDetach.emit(that.nativeElement);\n        }\n    }\n\n    @Output() onCreate: EventEmitter<any> = new EventEmitter();\n    @Output() onReady: EventEmitter<any> = new EventEmitter();\n    @Output() onAttach: EventEmitter<any> = new EventEmitter();\n    @Output() onDetach: EventEmitter<any> = new EventEmitter();\n\n    public nativeElement: any;\n\n    public addEventListener(type: string, listener: EventListenerOrEventListenerObject, options: boolean | AddEventListenerOptions = false): void {\n        this.nativeElement.addEventListener(type, listener, options);\n\t}\n\n\tpublic removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options: boolean | AddEventListenerOptions = false): void {\n\t\tthis.nativeElement.removeEventListener(type, listener, options);\n\t}\n\n\tpublic dispatchEvent(event: Event): boolean {\n\t\treturn this.nativeElement.dispatchEvent(event);\n\t}\n\n\tpublic blur(): void {\n\t\tthis.nativeElement.blur();\n\t}\n\n\tpublic click(): void {\n\t\tthis.nativeElement.click();\n\t}\n\n\tpublic focus(options?: FocusOptions): void {\n\t\tthis.nativeElement.focus(options);\n\t}\n\n/** @description Sets or gets the language. Used in conjunction with the property messages.  */\n\t@Input()\n\tget locale(): string {\n\t\treturn this.nativeElement ? this.nativeElement.locale : undefined;\n\t}\n\tset locale(value: string) {\n\t\tthis.nativeElement ? this.nativeElement.locale = value : undefined;\n\t}\n\n\t/** @description Callback used to customize the format of the messages that are returned from the Localization Module. */\n\t@Input()\n\tget localizeFormatFunction(): any {\n\t\treturn this.nativeElement ? this.nativeElement.localizeFormatFunction : undefined;\n\t}\n\tset localizeFormatFunction(value: any) {\n\t\tthis.nativeElement ? this.nativeElement.localizeFormatFunction = value : undefined;\n\t}\n\n\t/** @description Sets or gets an object specifying strings used in the widget that can be localized. Used in conjunction with the property locale.  */\n\t@Input()\n\tget messages(): any {\n\t\treturn this.nativeElement ? this.nativeElement.messages : undefined;\n\t}\n\tset messages(value: any) {\n\t\tthis.nativeElement ? this.nativeElement.messages = value : undefined;\n\t}\n\n\t/** @description Sets or gets the value indicating whether the element is aligned to support locales using right-to-left fonts. */\n\t@Input()\n\tget rightToLeft(): boolean {\n\t\treturn this.nativeElement ? this.nativeElement.rightToLeft : undefined;\n\t}\n\tset rightToLeft(value: boolean) {\n\t\tthis.nativeElement ? this.nativeElement.rightToLeft = value : undefined;\n\t}\n\n\t/** @description Determines the theme. Theme defines the look of the element */\n\t@Input()\n\tget theme(): string {\n\t\treturn this.nativeElement ? this.nativeElement.theme : undefined;\n\t}\n\tset theme(value: string) {\n\t\tthis.nativeElement ? this.nativeElement.theme = value : undefined;\n\t}\n}\n\nexport const Smart: any = window.Smart;\n\n","import { Grid } from './../index';\nimport { GridResizeMode, GridClipboardAutoFillMode, HorizontalAlignment, VerticalAlignment, Position, GridColumnSortOrder, GridEditingAction, LayoutPosition, GridCommandDisplayMode, GridEditingMode, GridFilteringFilterRowApplyMode, GridGroupingExpandMode, GridGroupingRenderMode, GridPagerAutoEllipsis, Scrolling, GridSelectionMode, GridSelectionAction, GridSelectionCheckBoxesSelectAllMode, GridSortingMode, GridAppearance, GridBehavior, GridLayout, GridClipboard, GridColumn, GridColumnMenu, GridColumnMenuDataSource, GridCommand, GridColumnGroup, GridCharting, Dialog, GridCheckBoxes, GridDataExport, GridEditing, GridEditingCommandKeys, GridCommandKey, GridEditingCommandBar, GridEditingCommandBarDataSource, GridEditingCommandColumn, GridEditingCommandColumnDataSource, GridEditingAddNewRow, GridFiltering, GridFilteringFilterRow, GridFilteringFilterMenu, GridFilteringFilterBuilder, GridGrouping, GridGroupingGroupBar, GridGroupingSummaryRow, GridPaging, GridPagingSpinner, GridPager, GridPagerPageSizeSelector, GridPagerSummary, GridPagerNavigationButtons, GridPagerNavigationButtonsPrevNextButtons, GridPagerNavigationButtonsFirstLastButtons, GridPagerNavigationButtonsLabels, GridPagerNavigationInput, GridPagerPageIndexSelectors, GridRowDetail, GridColumnHeader, GridSummaryRow, GridGroupHeader, GridHeader, GridFooter, GridRow, GridCell, GridSelection, GridSelectionCheckBoxes, GridSorting, ElementRenderMode} from './../index';\nimport { DataAdapter, Chart } from './../index';\nimport { Component, Directive, AfterViewInit, ElementRef, Input, OnInit, OnChanges, OnDestroy, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { BaseElement, Smart } from './smart.element';\nexport { GridResizeMode, GridClipboardAutoFillMode, HorizontalAlignment, VerticalAlignment, Position, GridColumnSortOrder, GridEditingAction, LayoutPosition, GridCommandDisplayMode, GridEditingMode, GridFilteringFilterRowApplyMode, GridGroupingExpandMode, GridGroupingRenderMode, GridPagerAutoEllipsis, Scrolling, GridSelectionMode, GridSelectionAction, GridSelectionCheckBoxesSelectAllMode, GridSortingMode, GridAppearance, GridBehavior, GridLayout, GridClipboard, GridColumn, GridColumnMenu, GridColumnMenuDataSource, GridCommand, GridColumnGroup, GridCharting, Dialog, GridCheckBoxes, GridDataExport, GridEditing, GridEditingCommandKeys, GridCommandKey, GridEditingCommandBar, GridEditingCommandBarDataSource, GridEditingCommandColumn, GridEditingCommandColumnDataSource, GridEditingAddNewRow, GridFiltering, GridFilteringFilterRow, GridFilteringFilterMenu, GridFilteringFilterBuilder, GridGrouping, GridGroupingGroupBar, GridGroupingSummaryRow, GridPaging, GridPagingSpinner, GridPager, GridPagerPageSizeSelector, GridPagerSummary, GridPagerNavigationButtons, GridPagerNavigationButtonsPrevNextButtons, GridPagerNavigationButtonsFirstLastButtons, GridPagerNavigationButtonsLabels, GridPagerNavigationInput, GridPagerPageIndexSelectors, GridRowDetail, GridColumnHeader, GridSummaryRow, GridGroupHeader, GridHeader, GridFooter, GridRow, GridCell, GridSelection, GridSelectionCheckBoxes, GridSorting, ElementRenderMode} from './../index';\nexport { Smart } from './smart.element';\nexport { Grid } from './../index';\nexport { DataAdapter, Chart } from './../index';\n\n\n@Directive({\n\tselector: 'smart-grid, [smart-grid]'\n})\n\nexport class GridComponent extends BaseElement implements OnInit, AfterViewInit, OnDestroy, OnChanges {\n\tconstructor(ref: ElementRef<Grid>) {\n\t\tsuper(ref);\n\t\tthis.nativeElement = ref.nativeElement as Grid;\n\t}\n\n\tprivate eventHandlers: any[] = [];\n\n\tpublic nativeElement: Grid;\n\t/** @description Creates the component on demand.\n\t * @param properties An optional object of properties, which will be added to the template binded ones.\n\t */\n\tpublic createComponent(properties = {}): any {\n    \tthis.nativeElement = <Grid>document.createElement('smart-grid');\n\t\tfor (let propertyName in properties) { \n \t\t\tthis.nativeElement[propertyName] = properties[propertyName];\n\t\t}\n\t\treturn this.nativeElement;\n\t}\n\t/** @description An object containing settings related to the grid's appearance. */\n\t@Input()\n\tget appearance(): GridAppearance {\n\t\treturn this.nativeElement ? this.nativeElement.appearance : undefined;\n\t}\n\tset appearance(value: GridAppearance) {\n\t\tthis.nativeElement ? this.nativeElement.appearance = value : undefined;\n\t}\n\n\t/** @description An object containing settings related to the grid's behavior. */\n\t@Input()\n\tget behavior(): GridBehavior {\n\t\treturn this.nativeElement ? this.nativeElement.behavior : undefined;\n\t}\n\tset behavior(value: GridBehavior) {\n\t\tthis.nativeElement ? this.nativeElement.behavior = value : undefined;\n\t}\n\n\t/** @description An object containing settings related to the grid's layout. */\n\t@Input()\n\tget layout(): GridLayout {\n\t\treturn this.nativeElement ? this.nativeElement.layout : undefined;\n\t}\n\tset layout(value: GridLayout) {\n\t\tthis.nativeElement ? this.nativeElement.layout = value : undefined;\n\t}\n\n\t/** @description The clipboard property is used to enable/disable clipboard operations with Ctrl+C, Ctrl+X and Ctrl+V keyboard navigations.. */\n\t@Input()\n\tget clipboard(): GridClipboard {\n\t\treturn this.nativeElement ? this.nativeElement.clipboard : undefined;\n\t}\n\tset clipboard(value: GridClipboard) {\n\t\tthis.nativeElement ? this.nativeElement.clipboard = value : undefined;\n\t}\n\n\t/** @description The columns property is used to describe all columns displayed in the grid.  */\n\t@Input()\n\tget columns(): {label: string, dataField: string}[] | string[] | number | GridColumn[] {\n\t\treturn this.nativeElement ? this.nativeElement.columns : undefined;\n\t}\n\tset columns(value: {label: string, dataField: string}[] | string[] | number | GridColumn[]) {\n\t\tthis.nativeElement ? this.nativeElement.columns = value : undefined;\n\t}\n\n\t/** @description Column Menu is the drop-down menu displayed after clicking the column header's drop-down button, which is displayed when you hover the column header. It allows you to customize column settings. For example: Sort, Filter or Group the Grid by the current column. */\n\t@Input()\n\tget columnMenu(): GridColumnMenu {\n\t\treturn this.nativeElement ? this.nativeElement.columnMenu : undefined;\n\t}\n\tset columnMenu(value: GridColumnMenu) {\n\t\tthis.nativeElement ? this.nativeElement.columnMenu = value : undefined;\n\t}\n\n\t/** @description Describes the settings of the column groups. */\n\t@Input()\n\tget columnGroups(): GridColumnGroup[] {\n\t\treturn this.nativeElement ? this.nativeElement.columnGroups : undefined;\n\t}\n\tset columnGroups(value: GridColumnGroup[]) {\n\t\tthis.nativeElement ? this.nativeElement.columnGroups = value : undefined;\n\t}\n\n\t/** @description Sets the Grid Charting Data Visualization. */\n\t@Input()\n\tget charting(): GridCharting {\n\t\treturn this.nativeElement ? this.nativeElement.charting : undefined;\n\t}\n\tset charting(value: GridCharting) {\n\t\tthis.nativeElement ? this.nativeElement.charting = value : undefined;\n\t}\n\n\t/** @description Sets the TreeGrid checkboxes. */\n\t@Input()\n\tget checkBoxes(): GridCheckBoxes {\n\t\treturn this.nativeElement ? this.nativeElement.checkBoxes : undefined;\n\t}\n\tset checkBoxes(value: GridCheckBoxes) {\n\t\tthis.nativeElement ? this.nativeElement.checkBoxes = value : undefined;\n\t}\n\n\t/** @description Sets the Grid Data Export options. */\n\t@Input()\n\tget dataExport(): GridDataExport {\n\t\treturn this.nativeElement ? this.nativeElement.dataExport : undefined;\n\t}\n\tset dataExport(value: GridDataExport) {\n\t\tthis.nativeElement ? this.nativeElement.dataExport = value : undefined;\n\t}\n\n\t/** @description Sets the grid's data source. The value of dataSource can be an instance of JQX.DataAdapter. */\n\t@Input()\n\tget dataSource(): DataAdapter {\n\t\treturn this.nativeElement ? this.nativeElement.dataSource : undefined;\n\t}\n\tset dataSource(value: DataAdapter) {\n\t\tthis.nativeElement ? this.nativeElement.dataSource = value : undefined;\n\t}\n\n\t/** @description Describes the grid's editing settings. */\n\t@Input()\n\tget editing(): GridEditing {\n\t\treturn this.nativeElement ? this.nativeElement.editing : undefined;\n\t}\n\tset editing(value: GridEditing) {\n\t\tthis.nativeElement ? this.nativeElement.editing = value : undefined;\n\t}\n\n\t/** @description Describes the grid's filtering settings. */\n\t@Input()\n\tget filtering(): GridFiltering {\n\t\treturn this.nativeElement ? this.nativeElement.filtering : undefined;\n\t}\n\tset filtering(value: GridFiltering) {\n\t\tthis.nativeElement ? this.nativeElement.filtering = value : undefined;\n\t}\n\n\t/** @description Describes the grid's grouping settings. */\n\t@Input()\n\tget grouping(): GridGrouping {\n\t\treturn this.nativeElement ? this.nativeElement.grouping : undefined;\n\t}\n\tset grouping(value: GridGrouping) {\n\t\tthis.nativeElement ? this.nativeElement.grouping = value : undefined;\n\t}\n\n\t/** @description Sets the messages values. */\n\t@Input()\n\tget messages(): any {\n\t\treturn this.nativeElement ? this.nativeElement.messages : undefined;\n\t}\n\tset messages(value: any) {\n\t\tthis.nativeElement ? this.nativeElement.messages = value : undefined;\n\t}\n\n\t/** @description Callback function(chart: JQX.Chart) called when the chart has been initialized. You can use this function to customize the Chart element settings. */\n\t@Input()\n\tget onCellValue(): {(cell: GridCell): void} {\n\t\treturn this.nativeElement ? this.nativeElement.onCellValue : undefined;\n\t}\n\tset onCellValue(value: {(cell: GridCell): void}) {\n\t\tthis.nativeElement ? this.nativeElement.onCellValue = value : undefined;\n\t}\n\n\t/** @description Callback function() called when the grid has been rendered. */\n\t@Input()\n\tget onCellUpdate(): {(cell: GridCell, oldValue: any, value: any, confirm: {(commit: boolean): void}): void} {\n\t\treturn this.nativeElement ? this.nativeElement.onCellUpdate : undefined;\n\t}\n\tset onCellUpdate(value: {(cell: GridCell, oldValue: any, value: any, confirm: {(commit: boolean): void}): void}) {\n\t\tthis.nativeElement ? this.nativeElement.onCellUpdate = value : undefined;\n\t}\n\n\t/** @description Describes the paging settings. */\n\t@Input()\n\tget onCellRender(): {(cell: GridCell): void} {\n\t\treturn this.nativeElement ? this.nativeElement.onCellRender : undefined;\n\t}\n\tset onCellRender(value: {(cell: GridCell): void}) {\n\t\tthis.nativeElement ? this.nativeElement.onCellRender = value : undefined;\n\t}\n\n\t/** @description Describes the pager settings. */\n\t@Input()\n\tget onBeforeInit(): {(): void} {\n\t\treturn this.nativeElement ? this.nativeElement.onBeforeInit : undefined;\n\t}\n\tset onBeforeInit(value: {(): void}) {\n\t\tthis.nativeElement ? this.nativeElement.onBeforeInit = value : undefined;\n\t}\n\n\t/** @description Sets the row details. */\n\t@Input()\n\tget onInit(): {(): void} {\n\t\treturn this.nativeElement ? this.nativeElement.onInit : undefined;\n\t}\n\tset onInit(value: {(): void}) {\n\t\tthis.nativeElement ? this.nativeElement.onInit = value : undefined;\n\t}\n\n\t/** @description Sets the scroll mode settings. */\n\t@Input()\n\tget onAfterInit(): {(): void} {\n\t\treturn this.nativeElement ? this.nativeElement.onAfterInit : undefined;\n\t}\n\tset onAfterInit(value: {(): void}) {\n\t\tthis.nativeElement ? this.nativeElement.onAfterInit = value : undefined;\n\t}\n\n\t/** @description Describes the column header settings. */\n\t@Input()\n\tget onChartInit(): any {\n\t\treturn this.nativeElement ? this.nativeElement.onChartInit : undefined;\n\t}\n\tset onChartInit(value: any) {\n\t\tthis.nativeElement ? this.nativeElement.onChartInit = value : undefined;\n\t}\n\n\t/** @description Describes the summary row settings. */\n\t@Input()\n\tget onRender(): any {\n\t\treturn this.nativeElement ? this.nativeElement.onRender : undefined;\n\t}\n\tset onRender(value: any) {\n\t\tthis.nativeElement ? this.nativeElement.onRender = value : undefined;\n\t}\n\n\t/** @description Describes the settings for the group header. */\n\t@Input()\n\tget onKey(): {(event: KeyboardEvent): void} {\n\t\treturn this.nativeElement ? this.nativeElement.onKey : undefined;\n\t}\n\tset onKey(value: {(event: KeyboardEvent): void}) {\n\t\tthis.nativeElement ? this.nativeElement.onKey = value : undefined;\n\t}\n\n\t/** @description Describes the header settings of the grid. */\n\t@Input()\n\tget onRowInit(): {(index: number, row: GridRow): void} {\n\t\treturn this.nativeElement ? this.nativeElement.onRowInit : undefined;\n\t}\n\tset onRowInit(value: {(index: number, row: GridRow): void}) {\n\t\tthis.nativeElement ? this.nativeElement.onRowInit = value : undefined;\n\t}\n\n\t/** @description Describes the footer settings of the grid. */\n\t@Input()\n\tget onRowDetailInit(): {(index: number, row: GridRow, details: HTMLElement): void} {\n\t\treturn this.nativeElement ? this.nativeElement.onRowDetailInit : undefined;\n\t}\n\tset onRowDetailInit(value: {(index: number, row: GridRow, details: HTMLElement): void}) {\n\t\tthis.nativeElement ? this.nativeElement.onRowDetailInit = value : undefined;\n\t}\n\n\t/** @description The rows property is used to describe all rows displayed in the grid. */\n\t@Input()\n\tget onRowDetailUpdated(): {(index: number, row: GridRow, details: HTMLElement): void} {\n\t\treturn this.nativeElement ? this.nativeElement.onRowDetailUpdated : undefined;\n\t}\n\tset onRowDetailUpdated(value: {(index: number, row: GridRow, details: HTMLElement): void}) {\n\t\tthis.nativeElement ? this.nativeElement.onRowDetailUpdated = value : undefined;\n\t}\n\n\t/** @description Describes the selection settings. */\n\t@Input()\n\tget onRowInserted(): {(index: number, row: GridRow): void} {\n\t\treturn this.nativeElement ? this.nativeElement.onRowInserted : undefined;\n\t}\n\tset onRowInserted(value: {(index: number, row: GridRow): void}) {\n\t\tthis.nativeElement ? this.nativeElement.onRowInserted = value : undefined;\n\t}\n\n\t/** @description Describes sorting settings. */\n\t@Input()\n\tget onRowRemoved(): {(index: number, row: GridRow): void} {\n\t\treturn this.nativeElement ? this.nativeElement.onRowRemoved : undefined;\n\t}\n\tset onRowRemoved(value: {(index: number, row: GridRow): void}) {\n\t\tthis.nativeElement ? this.nativeElement.onRowRemoved = value : undefined;\n\t}\n\n\t/** @description undefined */\n\t@Input()\n\tget onRowUpdate(): {(index: number, row: GridRow, oldValues: any[], values: any[], confirm: {(commit: boolean): void}): void} {\n\t\treturn this.nativeElement ? this.nativeElement.onRowUpdate : undefined;\n\t}\n\tset onRowUpdate(value: {(index: number, row: GridRow, oldValues: any[], values: any[], confirm: {(commit: boolean): void}): void}) {\n\t\tthis.nativeElement ? this.nativeElement.onRowUpdate = value : undefined;\n\t}\n\n\t/** @description undefined */\n\t@Input()\n\tget onRowUpdated(): {(index: number, row: GridRow): void} {\n\t\treturn this.nativeElement ? this.nativeElement.onRowUpdated : undefined;\n\t}\n\tset onRowUpdated(value: {(index: number, row: GridRow): void}) {\n\t\tthis.nativeElement ? this.nativeElement.onRowUpdated = value : undefined;\n\t}\n\n\t/** @description undefined */\n\t@Input()\n\tget onColumnInit(): {(index: number, column: GridColumn): void} {\n\t\treturn this.nativeElement ? this.nativeElement.onColumnInit : undefined;\n\t}\n\tset onColumnInit(value: {(index: number, column: GridColumn): void}) {\n\t\tthis.nativeElement ? this.nativeElement.onColumnInit = value : undefined;\n\t}\n\n\t/** @description undefined */\n\t@Input()\n\tget onColumnInserted(): {(index: number, column: GridColumn): void} {\n\t\treturn this.nativeElement ? this.nativeElement.onColumnInserted : undefined;\n\t}\n\tset onColumnInserted(value: {(index: number, column: GridColumn): void}) {\n\t\tthis.nativeElement ? this.nativeElement.onColumnInserted = value : undefined;\n\t}\n\n\t/** @description undefined */\n\t@Input()\n\tget onColumnRemoved(): {(index: number, column: GridColumn): void} {\n\t\treturn this.nativeElement ? this.nativeElement.onColumnRemoved : undefined;\n\t}\n\tset onColumnRemoved(value: {(index: number, column: GridColumn): void}) {\n\t\tthis.nativeElement ? this.nativeElement.onColumnRemoved = value : undefined;\n\t}\n\n\t/** @description undefined */\n\t@Input()\n\tget onColumnUpdated(): {(index: number, column: GridColumn): void} {\n\t\treturn this.nativeElement ? this.nativeElement.onColumnUpdated : undefined;\n\t}\n\tset onColumnUpdated(value: {(index: number, column: GridColumn): void}) {\n\t\tthis.nativeElement ? this.nativeElement.onColumnUpdated = value : undefined;\n\t}\n\n\t/** @description undefined */\n\t@Input()\n\tget onCommand(): {(name: string, command: any, details: GridCell, event: Event | KeyboardEvent | PointerEvent, handled: boolean): void} {\n\t\treturn this.nativeElement ? this.nativeElement.onCommand : undefined;\n\t}\n\tset onCommand(value: {(name: string, command: any, details: GridCell, event: Event | KeyboardEvent | PointerEvent, handled: boolean): void}) {\n\t\tthis.nativeElement ? this.nativeElement.onCommand = value : undefined;\n\t}\n\n\t/** @description undefined */\n\t@Input()\n\tget paging(): GridPaging {\n\t\treturn this.nativeElement ? this.nativeElement.paging : undefined;\n\t}\n\tset paging(value: GridPaging) {\n\t\tthis.nativeElement ? this.nativeElement.paging = value : undefined;\n\t}\n\n\t/** @description undefined */\n\t@Input()\n\tget pager(): GridPager {\n\t\treturn this.nativeElement ? this.nativeElement.pager : undefined;\n\t}\n\tset pager(value: GridPager) {\n\t\tthis.nativeElement ? this.nativeElement.pager = value : undefined;\n\t}\n\n\t/** @description undefined */\n\t@Input()\n\tget rowDetail(): GridRowDetail {\n\t\treturn this.nativeElement ? this.nativeElement.rowDetail : undefined;\n\t}\n\tset rowDetail(value: GridRowDetail) {\n\t\tthis.nativeElement ? this.nativeElement.rowDetail = value : undefined;\n\t}\n\n\t/** @description undefined */\n\t@Input()\n\tget scrolling(): Scrolling {\n\t\treturn this.nativeElement ? this.nativeElement.scrolling : undefined;\n\t}\n\tset scrolling(value: Scrolling) {\n\t\tthis.nativeElement ? this.nativeElement.scrolling = value : undefined;\n\t}\n\n\t/** @description undefined */\n\t@Input()\n\tget columnHeader(): GridColumnHeader {\n\t\treturn this.nativeElement ? this.nativeElement.columnHeader : undefined;\n\t}\n\tset columnHeader(value: GridColumnHeader) {\n\t\tthis.nativeElement ? this.nativeElement.columnHeader = value : undefined;\n\t}\n\n\t/** @description undefined */\n\t@Input()\n\tget summaryRow(): GridSummaryRow {\n\t\treturn this.nativeElement ? this.nativeElement.summaryRow : undefined;\n\t}\n\tset summaryRow(value: GridSummaryRow) {\n\t\tthis.nativeElement ? this.nativeElement.summaryRow = value : undefined;\n\t}\n\n\t/** @description undefined */\n\t@Input()\n\tget groupHeader(): GridGroupHeader {\n\t\treturn this.nativeElement ? this.nativeElement.groupHeader : undefined;\n\t}\n\tset groupHeader(value: GridGroupHeader) {\n\t\tthis.nativeElement ? this.nativeElement.groupHeader = value : undefined;\n\t}\n\n\t/** @description undefined */\n\t@Input()\n\tget header(): GridHeader {\n\t\treturn this.nativeElement ? this.nativeElement.header : undefined;\n\t}\n\tset header(value: GridHeader) {\n\t\tthis.nativeElement ? this.nativeElement.header = value : undefined;\n\t}\n\n\t/** @description undefined */\n\t@Input()\n\tget footer(): GridFooter {\n\t\treturn this.nativeElement ? this.nativeElement.footer : undefined;\n\t}\n\tset footer(value: GridFooter) {\n\t\tthis.nativeElement ? this.nativeElement.footer = value : undefined;\n\t}\n\n\t/** @description undefined */\n\t@Input()\n\tget rows(): GridRow[] {\n\t\treturn this.nativeElement ? this.nativeElement.rows : undefined;\n\t}\n\tset rows(value: GridRow[]) {\n\t\tthis.nativeElement ? this.nativeElement.rows = value : undefined;\n\t}\n\n\t/** @description undefined */\n\t@Input()\n\tget selection(): GridSelection {\n\t\treturn this.nativeElement ? this.nativeElement.selection : undefined;\n\t}\n\tset selection(value: GridSelection) {\n\t\tthis.nativeElement ? this.nativeElement.selection = value : undefined;\n\t}\n\n\t/** @description undefined */\n\t@Input()\n\tget sorting(): GridSorting {\n\t\treturn this.nativeElement ? this.nativeElement.sorting : undefined;\n\t}\n\tset sorting(value: GridSorting) {\n\t\tthis.nativeElement ? this.nativeElement.sorting = value : undefined;\n\t}\n\n\t/** @description This event is triggered, when the edit begins.\n\t*  @param event. The custom event. \tCustom event was created with: event.detail(\trow, \tcolumn, \tcell)\n\t*   row - The edited row.\n\t*   column - The edited column.\n\t*   cell - The edited cell.\n\t*/\n\t@Output() onBeginEdit: EventEmitter<CustomEvent> = new EventEmitter();\n\n\t/** @description This event is triggered, when the selection is changed. When you select with a drag, the event is triggered when the drag starts and ends. \n\t*  @param event. The custom event. \tCustom event was created with: event.detail(\tstarted, \tfinished, \toriginalEvent)\n\t*   started - The flag is <em>true</em>, when the selection starts. The flag is <em>false</em>, when the selection ends and when the user changes the selection by dragging.\n\t*   finished - The flag is <em>true</em>, when the selection ends. The flag is <em>false</em>, when the selection starts and when the user changes the selection by dragging.\n\t*   originalEvent - The original event object, which is 'pointer', 'touch' or 'mouse' Event object, depending on the device type and web browser\n\t*/\n\t@Output() onChange: EventEmitter<CustomEvent> = new EventEmitter();\n\n\t/** @description This event is triggered, when the user clicks on the header of a column.\n\t*  @param event. The custom event. \tCustom event was created with: event.detail(\tcolumn, \toriginalEvent)\n\t*   column - The clicked column.\n\t*   originalEvent - The original event object, which is 'pointer', 'touch' or 'mouse' Event object, depending on the device type and web browser\n\t*/\n\t@Output() onColumnClick: EventEmitter<CustomEvent> = new EventEmitter();\n\n\t/** @description This event is triggered, when the user double clicks on the header of a column.\n\t*  @param event. The custom event. \tCustom event was created with: event.detail(\tcolumn, \toriginalEvent)\n\t*   column - The double-clicked column.\n\t*   originalEvent - The original event object, which is 'pointer', 'touch' or 'mouse' Event object, depending on the device type and web browser\n\t*/\n\t@Output() onColumnDoubleClick: EventEmitter<CustomEvent> = new EventEmitter();\n\n\t/** @description This event is triggered, when the user resized a column.\n\t*  @param event. The custom event. \tCustom event was created with: event.detail(\tcolumn, \toldWidth, \twidth)\n\t*   column - The resized column.\n\t*   oldWidth - The old width of the column.\n\t*   width - The new width of the column.\n\t*/\n\t@Output() onColumnResize: EventEmitter<CustomEvent> = new EventEmitter();\n\n\t/** @description This event is triggered, when the user starts a column drag.\n\t*  @param event. The custom event. \tCustom event was created with: event.detail(\tcolumn, \tindex, \toriginalEvent)\n\t*   column - The column.\n\t*   index - The column's index\n\t*   originalEvent - The origianl Event object.\n\t*/\n\t@Output() onColumnDragStart: EventEmitter<CustomEvent> = new EventEmitter();\n\n\t/** @description This event is triggered, when the user drags a column.\n\t*  @param event. The custom event. \tCustom event was created with: event.detail(\tcolumn, \tindex, \tdata, \toriginalEvent)\n\t*   column - The column.\n\t*   index - The column's index\n\t*   data - The dragging object. data.feedback and data.feedbackLine are HTML Elements which are displayed while the user drags. The object has error(), success() and data() methods which you can call to set the feedback state.\n\t*   originalEvent - The origianl Event object.\n\t*/\n\t@Output() onColumnDragging: EventEmitter<CustomEvent> = new EventEmitter();\n\n\t/** @description This event is triggered, when the user drags a column.\n\t*  @param event. The custom event. \tCustom event was created with: event.detail(\tcolumn, \tindex, \tnewIndex, \tdata, \toriginalEvent)\n\t*   column - The column.\n\t*   index - The column's index\n\t*   newIndex - The column's new index\n\t*   data - The dragging object. data.feedback and data.feedbackLine are HTML Elements which are displayed while the user drags. The object has error(), success() and data() methods which you can call to set the feedback state.\n\t*   originalEvent - The origianl Event object.\n\t*/\n\t@Output() onColumnDragEnd: EventEmitter<CustomEvent> = new EventEmitter();\n\n\t/** @description This event is triggered, when the user starts a row drag.\n\t*  @param event. The custom event. \tCustom event was created with: event.detail(\trow, \tindex, \toriginalEvent)\n\t*   row - The row.\n\t*   index - The row's index\n\t*   originalEvent - The origianl Event object.\n\t*/\n\t@Output() onRowDragStart: EventEmitter<CustomEvent> = new EventEmitter();\n\n\t/** @description This event is triggered, when the user drags a row.\n\t*  @param event. The custom event. \tCustom event was created with: event.detail(\trow, \tindex, \tdata, \toriginalEvent)\n\t*   row - The row.\n\t*   index - The row's index\n\t*   data - The dragging object. data.feedback and data.feedbackLine are HTML Elements which are displayed while the user drags. The object has error(), success() and data() methods which you can call to set the feedback state.\n\t*   originalEvent - The origianl Event object.\n\t*/\n\t@Output() onRowDragging: EventEmitter<CustomEvent> = new EventEmitter();\n\n\t/** @description This event is triggered, when the user drags a row.\n\t*  @param event. The custom event. \tCustom event was created with: event.detail(\trow, \tindex, \tnewIndex, \tdata, \toriginalEvent)\n\t*   row - The row.\n\t*   index - The row's index\n\t*   newIndex - The row's new index\n\t*   data - The dragging object. data.feedback and data.feedbackLine are HTML Elements which are displayed while the user drags. The object has error(), success() and data() methods which you can call to set the feedback state.\n\t*   originalEvent - The origianl Event object.\n\t*/\n\t@Output() onRowDragEnd: EventEmitter<CustomEvent> = new EventEmitter();\n\n\t/** @description This event is triggered, when the user expands a row of the grid. The Grid is in TreeGrid/Grouping mode.\n\t*  @param event. The custom event. \tCustom event was created with: event.detail(\trow, \toriginalEvent)\n\t*   row - The expanded row.\n\t*   originalEvent - The original event object, which is 'pointer', 'touch' or 'mouse' Event object, depending on the device type and web browser\n\t*/\n\t@Output() onRowExpand: EventEmitter<CustomEvent> = new EventEmitter();\n\n\t/** @description This event is triggered, when the user collapsed a row of the grid. The Grid is in TreeGrid/Grouping mode.\n\t*  @param event. The custom event. \tCustom event was created with: event.detail(\trow, \toriginalEvent)\n\t*   row - The collapsed row. \n\t*   originalEvent - The original event object, which is 'pointer', 'touch' or 'mouse' Event object, depending on the device type and web browser\n\t*/\n\t@Output() onRowCollapse: EventEmitter<CustomEvent> = new EventEmitter();\n\n\t/** @description This event is triggered, when the user clicks on a row of the grid.\n\t*  @param event. The custom event. \tCustom event was created with: event.detail(\trow, \toriginalEvent)\n\t*   row - The clicked row.\n\t*   originalEvent - The original event object, which is 'pointer', 'touch' or 'mouse' Event object, depending on the device type and web browser\n\t*/\n\t@Output() onRowClick: EventEmitter<CustomEvent> = new EventEmitter();\n\n\t/** @description This event is triggered, when the user double clicks on a row of the grid.\n\t*  @param event. The custom event. \tCustom event was created with: event.detail(\trow, \toriginalEvent)\n\t*   row - The double-clicked row.\n\t*   originalEvent - The original event object, which is 'pointer', 'touch' or 'mouse' Event object, depending on the device type and web browser\n\t*/\n\t@Output() onRowDoubleClick: EventEmitter<CustomEvent> = new EventEmitter();\n\n\t/** @description This event is triggered, when the user resized a row.\n\t*  @param event. The custom event. \tCustom event was created with: event.detail(\trow, \toldHeight, \theight)\n\t*   row - The resized row.\n\t*   oldHeight - The old height of the row.\n\t*   height - The new height of the row.\n\t*/\n\t@Output() onRowResize: EventEmitter<CustomEvent> = new EventEmitter();\n\n\t/** @description This event is triggered, when the user clicks on a cell of the grid.\n\t*  @param event. The custom event. \tCustom event was created with: event.detail(\tcell, \toriginalEvent)\n\t*   cell - The clicked cell.\n\t*   originalEvent - The original event object, which is 'pointer', 'touch' or 'mouse' Event object, depending on the device type and web browser\n\t*/\n\t@Output() onCellClick: EventEmitter<CustomEvent> = new EventEmitter();\n\n\t/** @description This event is triggered, when the user double clicks on a cell of the grid.\n\t*  @param event. The custom event. \tCustom event was created with: event.detail(\tcell, \toriginalEvent)\n\t*   cell - The double-clicked cell. \n\t*   originalEvent - The original event object, which is 'pointer', 'touch' or 'mouse' Event object, depending on the device type and web browser\n\t*/\n\t@Output() onCellDoubleClick: EventEmitter<CustomEvent> = new EventEmitter();\n\n\t/** @description This event is triggered, when the edit ends.\n\t*  @param event. The custom event. \tCustom event was created with: event.detail(\trow, \tcolumn, \tcell)\n\t*   row - The edited row.\n\t*   column - The edited column.\n\t*   cell - The edited cell.\n\t*/\n\t@Output() onEndEdit: EventEmitter<CustomEvent> = new EventEmitter();\n\n\t/** @description This event is triggered, when a filter is added or removed.\n\t*  @param event. The custom event. \tCustom event was created with: event.detail(\tcolumns, \tdata)\n\t*   columns - Array of columns.\n\t*   data - Array of {dataField: string, filter: string}. <em>dataField</em> is the column's data field. <em>filter</em> is a filter expression like 'startsWith B'\n\t*/\n\t@Output() onFilter: EventEmitter<CustomEvent> = new EventEmitter();\n\n\t/** @description This event is triggered, when the grid is resized.\n\t*  @param event. The custom event. \t*/\n\t@Output() onResize: EventEmitter<CustomEvent> = new EventEmitter();\n\n\t/** @description This event is triggered when the user touches and holds on the row for at least 300ms.\n\t*  @param event. The custom event. \tCustom event was created with: event.detail(\trow, \toriginalEvent)\n\t*   row - The tapped row.\n\t*   originalEvent - The original event object, which is 'pointer', 'touch' or 'mouse' Event object, depending on the device type and web browser\n\t*/\n\t@Output() onRowTap: EventEmitter<CustomEvent> = new EventEmitter();\n\n\t/** @description This event is triggered when the user touches and holds on the cell for at least 300ms.\n\t*  @param event. The custom event. \tCustom event was created with: event.detail(\tcell, \toriginalEvent)\n\t*   cell - The tapped row.\n\t*   originalEvent - The original event object, which is 'pointer', 'touch' or 'mouse' Event object, depending on the device type and web browser\n\t*/\n\t@Output() onCellTap: EventEmitter<CustomEvent> = new EventEmitter();\n\n\t/** @description This event is triggered, when the user changes the pages.\n\t*  @param event. The custom event. \t*/\n\t@Output() onPage: EventEmitter<CustomEvent> = new EventEmitter();\n\n\t/** @description This event is triggered, when a sorting column is added or removed.\n\t*  @param event. The custom event. \tCustom event was created with: event.detail(\tcolumns, \tdata)\n\t*   columns - Array of columns.\n\t*   data - Array of {dataField: string, sortOrder: string, sortIndex: number}. <em>dataField</em> is the column's data field. <em>sortOrder</em> is 'asc' or 'desc', <em>sortIndex</em> is the index of the column in multi column sorting.\n\t*/\n\t@Output() onSort: EventEmitter<CustomEvent> = new EventEmitter();\n\n\t/** @description This event is triggered, when the user reaches the bottom of the grid.\n\t*  @param event. The custom event. \t*/\n\t@Output() onScrollBottomReached: EventEmitter<CustomEvent> = new EventEmitter();\n\n\t/** @description This event is triggered, when the user reaches the top of the grid.\n\t*  @param event. The custom event. \t*/\n\t@Output() onScrollTopReached: EventEmitter<CustomEvent> = new EventEmitter();\n\n\t/** @description Adds a new row and puts it into edit mode. When batch editing is enabled, the row is not saved until the batch edit is saved. \n\t* @param {string} position?. 'near' or 'far'\n\t* @returns {boolean}\n  */\n\tpublic async addNewRow(position?): Promise<any> {\n\t\tconst getResultOnRender = () => {\n            return new Promise(resolve => {\n                this.nativeElement.whenRendered(() => {\n                    const result = this.nativeElement.addNewRow(position);\n                    resolve(result)\n                });\n            });\n        };\n        const result = await getResultOnRender();\n\n        return result;\n    }\n\n\t/** @description Adds a new unbound row to the top or bottom. Unbound rows are not part of the Grid's dataSource. They become part of the dataSource, after an unbound row is edited. \n\t* @param {number} count. The count of unbound rows.\n\t* @param {string} position?. 'near' or 'far'\n\t* @returns {boolean}\n  */\n\tpublic async addUnboundRow(count, position?): Promise<any> {\n\t\tconst getResultOnRender = () => {\n            return new Promise(resolve => {\n                this.nativeElement.whenRendered(() => {\n                    const result = this.nativeElement.addUnboundRow(count, position);\n                    resolve(result)\n                });\n            });\n        };\n        const result = await getResultOnRender();\n\n        return result;\n    }\n\n\t/** @description Adds a filter to a column. This method will apply a filter to the Grid data. \n\t* @param {string} dataField. column bound data field\n\t* @param {string} filter. Filter expression like: 'startsWith B'\n\t* @param {boolean} refreshFilters?. \n\t*/\n    public addFilter(dataField: string, filter: string, refreshFilters?: boolean): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.addFilter(dataField, filter, refreshFilters);\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.addFilter(dataField, filter, refreshFilters);\n            });\n        }\n    }\n\n\t/** @description Auto-sizes grid rows. This method will update the height of all Grid rows. \n\t*/\n    public autoSizeRows(): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.autoSizeRows();\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.autoSizeRows();\n            });\n        }\n    }\n\n\t/** @description Auto-sizes grid columns. This method will update the width of all Grid columns. \n\t*/\n    public autoSizeColumns(): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.autoSizeColumns();\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.autoSizeColumns();\n            });\n        }\n    }\n\n\t/** @description Starts an update operation. This is appropriate when calling multiple methods or set multiple properties at once. \n\t*/\n    public beginUpdate(): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.beginUpdate();\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.beginUpdate();\n            });\n        }\n    }\n\n\t/** @description Begins row, cell or column. This method allows you to programmatically start a cell, row or column editing. After calling it, an editor HTMLElement will be created and displayed in the Grid. \n\t* @param {string | number} rowId. row bound id\n\t* @param {string} dataField?. column bound data field\n\t* @returns {boolean}\n  */\n\tpublic async beginEdit(rowId, dataField?): Promise<any> {\n\t\tconst getResultOnRender = () => {\n            return new Promise(resolve => {\n                this.nativeElement.whenRendered(() => {\n                    const result = this.nativeElement.beginEdit(rowId, dataField);\n                    resolve(result)\n                });\n            });\n        };\n        const result = await getResultOnRender();\n\n        return result;\n    }\n\n\t/** @description Clears all filters. Refreshes the view and updates all filter input components. \n\t*/\n    public clearFilter(): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.clearFilter();\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.clearFilter();\n            });\n        }\n    }\n\n\t/** @description Clears the selection that user have made. All row, cell and column selection highlights will be removed. \n\t*/\n    public clearSelection(): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.clearSelection();\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.clearSelection();\n            });\n        }\n    }\n\n\t/** @description Cancels the editing. This method closes the cell editor and cancels the changes. \n\t*/\n    public cancelEdit(): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.cancelEdit();\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.cancelEdit();\n            });\n        }\n    }\n\n\t/** @description Checks a TreeGrid row. This method updates the row's check-box. \n\t* @param {string | number} rowId. row bound id\n\t*/\n    public checkRow(rowId: string | number): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.checkRow(rowId);\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.checkRow(rowId);\n            });\n        }\n    }\n\n\t/** @description Checks all TreeGrid or Grouping rows. This method updates all check-boxes in the TreeGrid or Grouping rows. \n\t*/\n    public checkAllRows(): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.checkAllRows();\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.checkAllRows();\n            });\n        }\n    }\n\n\t/** @description Clears the user selection and empties the data source. The Grid will display 'No Rows' in the view. \n\t*/\n    public clearRows(): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.clearRows();\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.clearRows();\n            });\n        }\n    }\n\n\t/** @description Closes the column drop-down menu. \n\t*/\n    public closeMenu(): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.closeMenu();\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.closeMenu();\n            });\n        }\n    }\n\n\t/** @description Collapses a TreeGrid or Grouping row. \n\t* @param {string | number} rowId. row bound id\n\t*/\n    public collapseRow(rowId: string | number): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.collapseRow(rowId);\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.collapseRow(rowId);\n            });\n        }\n    }\n\n\t/** @description Collapses all TreeGrid or Grouping rows. \n\t*/\n    public collapseAllRows(): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.collapseAllRows();\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.collapseAllRows();\n            });\n        }\n    }\n\n\t/** @description Creates a Chart, when charting is enabled. \n\t* @param {string} type. Chart's type\n\t* @param {any[]} dataSource?. Chart's data source\n\t*/\n    public createChart(type: string, dataSource?: any[]): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.createChart(type, dataSource);\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.createChart(type, dataSource);\n            });\n        }\n    }\n\n\t/** @description Delete a row. When batch editing is enabled, the row is not saved until the batch edit is saved. \n\t* @param {string | number} rowId. row bound id\n\t*/\n    public deleteRow(rowId: string | number): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.deleteRow(rowId);\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.deleteRow(rowId);\n            });\n        }\n    }\n\n\t/** @description Scrolls to a row or cell. This method scrolls to a row or cell, when scrolling is necessary. If pagination is enabled, it will automatically change the page. \n\t* @param {string | number} rowId. row bound id\n\t* @param {string} dataField?. column bound data field\n\t* @returns {boolean}\n  */\n\tpublic async ensureVisible(rowId, dataField?): Promise<any> {\n\t\tconst getResultOnRender = () => {\n            return new Promise(resolve => {\n                this.nativeElement.whenRendered(() => {\n                    const result = this.nativeElement.ensureVisible(rowId, dataField);\n                    resolve(result)\n                });\n            });\n        };\n        const result = await getResultOnRender();\n\n        return result;\n    }\n\n\t/** @description Ends the editing. This method confirms all changes and closes the opened cell editor(s). \n\t*/\n    public endEdit(): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.endEdit();\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.endEdit();\n            });\n        }\n    }\n\n\t/** @description Ends the update operation. This method will resume the rendering and will refresh the Grid. \n\t* @param {boolean} refresh?. The flag that control the calls of the refresh method.\n\t*/\n    public endUpdate(refresh?: boolean): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.endUpdate(refresh);\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.endUpdate(refresh);\n            });\n        }\n    }\n\n\t/** @description Expands a TreeGrid or Grouping row. \n\t* @param {string | number} rowId. row bound id\n\t*/\n    public expandRow(rowId: string | number): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.expandRow(rowId);\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.expandRow(rowId);\n            });\n        }\n    }\n\n\t/** @description Expands all TreeGrid or Grouping rows. \n\t*/\n    public expandAllRows(): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.expandAllRows();\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.expandAllRows();\n            });\n        }\n    }\n\n\t/** @description Exports the Grid data to .XLSX, .PDF, .JSON, .XML, .CSV, .TSV, .HTML, .JPEG or .PNG. The method uses the options of the dataExport property. \n\t* @param {string} Dataformat. 'xlsx', 'pdf', 'json', 'xml', 'csv', 'tsv', 'html', 'png', 'jpeg'.\n\t*/\n    public exportData(Dataformat: string): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.exportData(Dataformat);\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.exportData(Dataformat);\n            });\n        }\n    }\n\n\t/** @description Gets an array of columns with applied sorting. \n\t* @returns {{[dataField: string]: { sortOrder: string, sortIndex: number }}}\n  */\n\tpublic async getSortedColumns(): Promise<any> {\n\t\tconst getResultOnRender = () => {\n            return new Promise(resolve => {\n                this.nativeElement.whenRendered(() => {\n                    const result = this.nativeElement.getSortedColumns();\n                    resolve(result)\n                });\n            });\n        };\n        const result = await getResultOnRender();\n\n        return result;\n    }\n\n\t/** @description Gets the selection. \n\t* @returns {any}\n  */\n\tpublic async getSelection(): Promise<any> {\n\t\tconst getResultOnRender = () => {\n            return new Promise(resolve => {\n                this.nativeElement.whenRendered(() => {\n                    const result = this.nativeElement.getSelection();\n                    resolve(result)\n                });\n            });\n        };\n        const result = await getResultOnRender();\n\n        return result;\n    }\n\n\t/** @description Gets an array of columns with applied filters. \n\t* @returns {any}\n  */\n\tpublic async getFilteredColumns(): Promise<any> {\n\t\tconst getResultOnRender = () => {\n            return new Promise(resolve => {\n                this.nativeElement.whenRendered(() => {\n                    const result = this.nativeElement.getFilteredColumns();\n                    resolve(result)\n                });\n            });\n        };\n        const result = await getResultOnRender();\n\n        return result;\n    }\n\n\t/** @description Gets an array of rows, which are visible and match the applied filter. \n\t* @returns {any}\n  */\n\tpublic async getVisibleRows(): Promise<any> {\n\t\tconst getResultOnRender = () => {\n            return new Promise(resolve => {\n                this.nativeElement.whenRendered(() => {\n                    const result = this.nativeElement.getVisibleRows();\n                    resolve(result)\n                });\n            });\n        };\n        const result = await getResultOnRender();\n\n        return result;\n    }\n\n\t/** @description Gets the result of the getVisibleRows or the rows hierarchy, when the Grid is in TreeGrid/Grouping mode. \n\t* @returns {any}\n  */\n\tpublic async getViewRows(): Promise<any> {\n\t\tconst getResultOnRender = () => {\n            return new Promise(resolve => {\n                this.nativeElement.whenRendered(() => {\n                    const result = this.nativeElement.getViewRows();\n                    resolve(result)\n                });\n            });\n        };\n        const result = await getResultOnRender();\n\n        return result;\n    }\n\n\t/** @description Gets the changes from the batch edit. \n\t* @returns {{ upDated: [{ id: string, dataField: string, oldValue: Object, newValue: Object }], deleted: [{id: string, data: Object}], added: [{id: string, data: Object}] }}\n  */\n\tpublic async getBatchEditChanges(): Promise<any> {\n\t\tconst getResultOnRender = () => {\n            return new Promise(resolve => {\n                this.nativeElement.whenRendered(() => {\n                    const result = this.nativeElement.getBatchEditChanges();\n                    resolve(result)\n                });\n            });\n        };\n        const result = await getResultOnRender();\n\n        return result;\n    }\n\n\t/** @description Gets whether a column's drop-down menu is opened. \n\t* @returns {boolean}\n  */\n\tpublic async hasMenu(): Promise<any> {\n\t\tconst getResultOnRender = () => {\n            return new Promise(resolve => {\n                this.nativeElement.whenRendered(() => {\n                    const result = this.nativeElement.hasMenu();\n                    resolve(result)\n                });\n            });\n        };\n        const result = await getResultOnRender();\n\n        return result;\n    }\n\n\t/** @description Hides the Details of a Row, when row details are enabled. \n\t* @param {string | number} rowId. row bound id\n\t*/\n    public hideDetail(rowId: string | number): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.hideDetail(rowId);\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.hideDetail(rowId);\n            });\n        }\n    }\n\n\t/** @description Opens a column drop-down menu. \n\t* @param {string} dataField. column bound data field\n\t*/\n    public openMenu(dataField: string): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.openMenu(dataField);\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.openMenu(dataField);\n            });\n        }\n    }\n\n\t/** @description Prints the Grid data. The method uses the options of the dataExport property. When printed, the Grid will not display any scrollbars so all rows and columns will be displayed. The grid will auto resize width and height to fit all contents. To customize the printing options, you can use  the dataExport property. \n\t*/\n    public print(): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.print();\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.print();\n            });\n        }\n    }\n\n\t/** @description Renders the grid. This method will make a full-refresh like in the initial Grid creation. It will create Rows, Columns and Cells HTML Elements and then refresh the Grid layout. \n\t*/\n    public refresh(): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.refresh();\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.refresh();\n            });\n        }\n    }\n\n\t/** @description Refreshes the grid with the current property values. This method will refresh the Grid layout. \n\t*/\n    public refreshView(): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.refreshView();\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.refreshView();\n            });\n        }\n    }\n\n\t/** @description Refreshes the grid cells in view. The method is useful for live-updates of cell values. \n\t* @param {string} dataField. column bound data field\n\t* @param {boolean} refreshFilters?. \n\t*/\n    public removeFilter(dataField: string, refreshFilters?: boolean): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.removeFilter(dataField, refreshFilters);\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.removeFilter(dataField, refreshFilters);\n            });\n        }\n    }\n\n\t/** @description Removes a column filter.  \n\t*/\n    public revertBatchEdit(): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.revertBatchEdit();\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.revertBatchEdit();\n            });\n        }\n    }\n\n\t/** @description Reverts the batch edit changes. This method cancels all changes made by the end-user. \n\t*/\n    public saveBatchEdit(): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.saveBatchEdit();\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.saveBatchEdit();\n            });\n        }\n    }\n\n\t/** @description Saves the batch edit changes. This method confirms the editing changes made by the end-user. \n\t* @param {string | number} rowId. row bound id\n\t* @param {string} dataField?. column bound data field\n\t*/\n    public select(rowId: string | number, dataField?: string): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.select(rowId, dataField);\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.select(rowId, dataField);\n            });\n        }\n    }\n\n\t/** @description Selects a row, cell or column. \n\t* @param {string | number} rowId. row bound id\n\t* @param {string} dataField. column bound data field\n\t* @param {string | number} endRowId. row bound id\n\t* @param {string} endDataField. column bound data field\n\t*/\n    public selectRange(rowId: string | number, dataField: string, endRowId: string | number, endDataField: string): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.selectRange(rowId, dataField, endRowId, endDataField);\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.selectRange(rowId, dataField, endRowId, endDataField);\n            });\n        }\n    }\n\n\t/** @description Selects a range of rows, cells or columns. The result of the method depends on the selection configuration of the Grid. \n\t* @param {string | number} rowId. row bound id\n\t*/\n    public showDetail(rowId: string | number): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.showDetail(rowId);\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.showDetail(rowId);\n            });\n        }\n    }\n\n\t/** @description Shows the Details of a Row, when row details are enabled. \n\t* @param {string | number} rowId. row bound id\n\t* @param {string} dataField?. column bound data field\n\t*/\n    public unselect(rowId: string | number, dataField?: string): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.unselect(rowId, dataField);\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.unselect(rowId, dataField);\n            });\n        }\n    }\n\n\t/** @description Unselects a row, cell or column. \n\t* @param {string | number} rowId. row bound id\n\t*/\n    public uncheckRow(rowId: string | number): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.uncheckRow(rowId);\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.uncheckRow(rowId);\n            });\n        }\n    }\n\n\t/** @description Unchecks a TreeGrid row. Sets its check-box to false. \n\t*/\n    public uncheckAllRows(): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.uncheckAllRows();\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.uncheckAllRows();\n            });\n        }\n    }\n\n\t/** @description Unchecks all TreeGrid or Grouping rows. Sets all check-boxes to false. \n\t* @param {string | number} rowId. row bound id\n\t*/\n    public toggleRow(rowId: string | number): void {\n        if (this.nativeElement.isRendered) {\n            this.nativeElement.toggleRow(rowId);\n        }\n        else\n        {\n            this.nativeElement.whenRendered(() => {\n                this.nativeElement.toggleRow(rowId);\n            });\n        }\n    }\n\n\n\tget isRendered(): boolean {\n\t\treturn this.nativeElement ? this.nativeElement.isRendered : false;\n\t}\n\n\tngOnInit() {\n\t}\n\n    ngAfterViewInit() {\n      const that = this;\n\n      that.onCreate.emit(that.nativeElement);\n\n\t\tSmart.Render();\n\n\t\tthis.nativeElement.whenRendered(() => { that.onReady.emit(that.nativeElement); });\n\t\tthis.listen();\n\t}\n\n\tngOnDestroy() {\n\t\tthis.unlisten();\n\t}\n\n\tngOnChanges(changes: SimpleChanges) {\n\t\tif (this.nativeElement && this.nativeElement.isRendered) {\n\t\t\tfor (const propName in changes) {\n\t\t\t\tif (changes.hasOwnProperty(propName)) {\n\t\t\t\t\tthis.nativeElement[propName] = changes[propName].currentValue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/** @description Add event listeners. */\n\tprivate listen(): void {\n        const that = this;\n\t\tthat.eventHandlers['beginEditHandler'] = (event: CustomEvent) => { that.onBeginEdit.emit(event); }\n\t\tthat.nativeElement.addEventListener('beginEdit', that.eventHandlers['beginEditHandler']);\n\n\t\tthat.eventHandlers['changeHandler'] = (event: CustomEvent) => { that.onChange.emit(event); }\n\t\tthat.nativeElement.addEventListener('change', that.eventHandlers['changeHandler']);\n\n\t\tthat.eventHandlers['columnClickHandler'] = (event: CustomEvent) => { that.onColumnClick.emit(event); }\n\t\tthat.nativeElement.addEventListener('columnClick', that.eventHandlers['columnClickHandler']);\n\n\t\tthat.eventHandlers['columnDoubleClickHandler'] = (event: CustomEvent) => { that.onColumnDoubleClick.emit(event); }\n\t\tthat.nativeElement.addEventListener('columnDoubleClick', that.eventHandlers['columnDoubleClickHandler']);\n\n\t\tthat.eventHandlers['columnResizeHandler'] = (event: CustomEvent) => { that.onColumnResize.emit(event); }\n\t\tthat.nativeElement.addEventListener('columnResize', that.eventHandlers['columnResizeHandler']);\n\n\t\tthat.eventHandlers['columnDragStartHandler'] = (event: CustomEvent) => { that.onColumnDragStart.emit(event); }\n\t\tthat.nativeElement.addEventListener('columnDragStart', that.eventHandlers['columnDragStartHandler']);\n\n\t\tthat.eventHandlers['columnDraggingHandler'] = (event: CustomEvent) => { that.onColumnDragging.emit(event); }\n\t\tthat.nativeElement.addEventListener('columnDragging', that.eventHandlers['columnDraggingHandler']);\n\n\t\tthat.eventHandlers['columnDragEndHandler'] = (event: CustomEvent) => { that.onColumnDragEnd.emit(event); }\n\t\tthat.nativeElement.addEventListener('columnDragEnd', that.eventHandlers['columnDragEndHandler']);\n\n\t\tthat.eventHandlers['rowDragStartHandler'] = (event: CustomEvent) => { that.onRowDragStart.emit(event); }\n\t\tthat.nativeElement.addEventListener('rowDragStart', that.eventHandlers['rowDragStartHandler']);\n\n\t\tthat.eventHandlers['rowDraggingHandler'] = (event: CustomEvent) => { that.onRowDragging.emit(event); }\n\t\tthat.nativeElement.addEventListener('rowDragging', that.eventHandlers['rowDraggingHandler']);\n\n\t\tthat.eventHandlers['rowDragEndHandler'] = (event: CustomEvent) => { that.onRowDragEnd.emit(event); }\n\t\tthat.nativeElement.addEventListener('rowDragEnd', that.eventHandlers['rowDragEndHandler']);\n\n\t\tthat.eventHandlers['rowExpandHandler'] = (event: CustomEvent) => { that.onRowExpand.emit(event); }\n\t\tthat.nativeElement.addEventListener('rowExpand', that.eventHandlers['rowExpandHandler']);\n\n\t\tthat.eventHandlers['rowCollapseHandler'] = (event: CustomEvent) => { that.onRowCollapse.emit(event); }\n\t\tthat.nativeElement.addEventListener('rowCollapse', that.eventHandlers['rowCollapseHandler']);\n\n\t\tthat.eventHandlers['rowClickHandler'] = (event: CustomEvent) => { that.onRowClick.emit(event); }\n\t\tthat.nativeElement.addEventListener('rowClick', that.eventHandlers['rowClickHandler']);\n\n\t\tthat.eventHandlers['rowDoubleClickHandler'] = (event: CustomEvent) => { that.onRowDoubleClick.emit(event); }\n\t\tthat.nativeElement.addEventListener('rowDoubleClick', that.eventHandlers['rowDoubleClickHandler']);\n\n\t\tthat.eventHandlers['rowResizeHandler'] = (event: CustomEvent) => { that.onRowResize.emit(event); }\n\t\tthat.nativeElement.addEventListener('rowResize', that.eventHandlers['rowResizeHandler']);\n\n\t\tthat.eventHandlers['cellClickHandler'] = (event: CustomEvent) => { that.onCellClick.emit(event); }\n\t\tthat.nativeElement.addEventListener('cellClick', that.eventHandlers['cellClickHandler']);\n\n\t\tthat.eventHandlers['cellDoubleClickHandler'] = (event: CustomEvent) => { that.onCellDoubleClick.emit(event); }\n\t\tthat.nativeElement.addEventListener('cellDoubleClick', that.eventHandlers['cellDoubleClickHandler']);\n\n\t\tthat.eventHandlers['endEditHandler'] = (event: CustomEvent) => { that.onEndEdit.emit(event); }\n\t\tthat.nativeElement.addEventListener('endEdit', that.eventHandlers['endEditHandler']);\n\n\t\tthat.eventHandlers['filterHandler'] = (event: CustomEvent) => { that.onFilter.emit(event); }\n\t\tthat.nativeElement.addEventListener('filter', that.eventHandlers['filterHandler']);\n\n\t\tthat.eventHandlers['resizeHandler'] = (event: CustomEvent) => { that.onResize.emit(event); }\n\t\tthat.nativeElement.addEventListener('resize', that.eventHandlers['resizeHandler']);\n\n\t\tthat.eventHandlers['rowTapHandler'] = (event: CustomEvent) => { that.onRowTap.emit(event); }\n\t\tthat.nativeElement.addEventListener('rowTap', that.eventHandlers['rowTapHandler']);\n\n\t\tthat.eventHandlers['cellTapHandler'] = (event: CustomEvent) => { that.onCellTap.emit(event); }\n\t\tthat.nativeElement.addEventListener('cellTap', that.eventHandlers['cellTapHandler']);\n\n\t\tthat.eventHandlers['pageHandler'] = (event: CustomEvent) => { that.onPage.emit(event); }\n\t\tthat.nativeElement.addEventListener('page', that.eventHandlers['pageHandler']);\n\n\t\tthat.eventHandlers['sortHandler'] = (event: CustomEvent) => { that.onSort.emit(event); }\n\t\tthat.nativeElement.addEventListener('sort', that.eventHandlers['sortHandler']);\n\n\t\tthat.eventHandlers['scrollBottomReachedHandler'] = (event: CustomEvent) => { that.onScrollBottomReached.emit(event); }\n\t\tthat.nativeElement.addEventListener('scrollBottomReached', that.eventHandlers['scrollBottomReachedHandler']);\n\n\t\tthat.eventHandlers['scrollTopReachedHandler'] = (event: CustomEvent) => { that.onScrollTopReached.emit(event); }\n\t\tthat.nativeElement.addEventListener('scrollTopReached', that.eventHandlers['scrollTopReachedHandler']);\n\n\t}\n\n\t/** @description Remove event listeners. */\n\tprivate unlisten(): void {\n        const that = this;\n\t\tif (that.eventHandlers['beginEditHandler']) {\n\t\t\tthat.nativeElement.removeEventListener('beginEdit', that.eventHandlers['beginEditHandler']);\n\t\t}\n\n\t\tif (that.eventHandlers['changeHandler']) {\n\t\t\tthat.nativeElement.removeEventListener('change', that.eventHandlers['changeHandler']);\n\t\t}\n\n\t\tif (that.eventHandlers['columnClickHandler']) {\n\t\t\tthat.nativeElement.removeEventListener('columnClick', that.eventHandlers['columnClickHandler']);\n\t\t}\n\n\t\tif (that.eventHandlers['columnDoubleClickHandler']) {\n\t\t\tthat.nativeElement.removeEventListener('columnDoubleClick', that.eventHandlers['columnDoubleClickHandler']);\n\t\t}\n\n\t\tif (that.eventHandlers['columnResizeHandler']) {\n\t\t\tthat.nativeElement.removeEventListener('columnResize', that.eventHandlers['columnResizeHandler']);\n\t\t}\n\n\t\tif (that.eventHandlers['columnDragStartHandler']) {\n\t\t\tthat.nativeElement.removeEventListener('columnDragStart', that.eventHandlers['columnDragStartHandler']);\n\t\t}\n\n\t\tif (that.eventHandlers['columnDraggingHandler']) {\n\t\t\tthat.nativeElement.removeEventListener('columnDragging', that.eventHandlers['columnDraggingHandler']);\n\t\t}\n\n\t\tif (that.eventHandlers['columnDragEndHandler']) {\n\t\t\tthat.nativeElement.removeEventListener('columnDragEnd', that.eventHandlers['columnDragEndHandler']);\n\t\t}\n\n\t\tif (that.eventHandlers['rowDragStartHandler']) {\n\t\t\tthat.nativeElement.removeEventListener('rowDragStart', that.eventHandlers['rowDragStartHandler']);\n\t\t}\n\n\t\tif (that.eventHandlers['rowDraggingHandler']) {\n\t\t\tthat.nativeElement.removeEventListener('rowDragging', that.eventHandlers['rowDraggingHandler']);\n\t\t}\n\n\t\tif (that.eventHandlers['rowDragEndHandler']) {\n\t\t\tthat.nativeElement.removeEventListener('rowDragEnd', that.eventHandlers['rowDragEndHandler']);\n\t\t}\n\n\t\tif (that.eventHandlers['rowExpandHandler']) {\n\t\t\tthat.nativeElement.removeEventListener('rowExpand', that.eventHandlers['rowExpandHandler']);\n\t\t}\n\n\t\tif (that.eventHandlers['rowCollapseHandler']) {\n\t\t\tthat.nativeElement.removeEventListener('rowCollapse', that.eventHandlers['rowCollapseHandler']);\n\t\t}\n\n\t\tif (that.eventHandlers['rowClickHandler']) {\n\t\t\tthat.nativeElement.removeEventListener('rowClick', that.eventHandlers['rowClickHandler']);\n\t\t}\n\n\t\tif (that.eventHandlers['rowDoubleClickHandler']) {\n\t\t\tthat.nativeElement.removeEventListener('rowDoubleClick', that.eventHandlers['rowDoubleClickHandler']);\n\t\t}\n\n\t\tif (that.eventHandlers['rowResizeHandler']) {\n\t\t\tthat.nativeElement.removeEventListener('rowResize', that.eventHandlers['rowResizeHandler']);\n\t\t}\n\n\t\tif (that.eventHandlers['cellClickHandler']) {\n\t\t\tthat.nativeElement.removeEventListener('cellClick', that.eventHandlers['cellClickHandler']);\n\t\t}\n\n\t\tif (that.eventHandlers['cellDoubleClickHandler']) {\n\t\t\tthat.nativeElement.removeEventListener('cellDoubleClick', that.eventHandlers['cellDoubleClickHandler']);\n\t\t}\n\n\t\tif (that.eventHandlers['endEditHandler']) {\n\t\t\tthat.nativeElement.removeEventListener('endEdit', that.eventHandlers['endEditHandler']);\n\t\t}\n\n\t\tif (that.eventHandlers['filterHandler']) {\n\t\t\tthat.nativeElement.onfilterHandler = null;\n\t\t}\n\n\t\tif (that.eventHandlers['resizeHandler']) {\n\t\t\tthat.nativeElement.removeEventListener('resize', that.eventHandlers['resizeHandler']);\n\t\t}\n\n\t\tif (that.eventHandlers['rowTapHandler']) {\n\t\t\tthat.nativeElement.removeEventListener('rowTap', that.eventHandlers['rowTapHandler']);\n\t\t}\n\n\t\tif (that.eventHandlers['cellTapHandler']) {\n\t\t\tthat.nativeElement.removeEventListener('cellTap', that.eventHandlers['cellTapHandler']);\n\t\t}\n\n\t\tif (that.eventHandlers['pageHandler']) {\n\t\t\tthat.nativeElement.removeEventListener('page', that.eventHandlers['pageHandler']);\n\t\t}\n\n\t\tif (that.eventHandlers['sortHandler']) {\n\t\t\tthat.nativeElement.removeEventListener('sort', that.eventHandlers['sortHandler']);\n\t\t}\n\n\t\tif (that.eventHandlers['scrollBottomReachedHandler']) {\n\t\t\tthat.nativeElement.removeEventListener('scrollBottomReached', that.eventHandlers['scrollBottomReachedHandler']);\n\t\t}\n\n\t\tif (that.eventHandlers['scrollTopReachedHandler']) {\n\t\t\tthat.nativeElement.removeEventListener('scrollTopReached', that.eventHandlers['scrollTopReachedHandler']);\n\t\t}\n\n\t}\n}\n","import { NgModule } from '@angular/core';\n\nimport { GridComponent } from './smart.grid';\nimport { CUSTOM_ELEMENTS_SCHEMA  } from '@angular/core';\n\n@NgModule({\n    declarations: [GridComponent],\n\tschemas: [CUSTOM_ELEMENTS_SCHEMA],\n\texports: [GridComponent]\n})\n\nexport class GridModule { }\n"]}