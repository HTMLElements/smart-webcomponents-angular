{"version":3,"file":"smart.element.d.ts","sources":["smart.element.d.ts"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEqB;;;AAFrB;AACA;;AAnCA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA","sourcesContent":["declare global {\r\n    interface Window {\r\n        Smart: any;\r\n    }\r\n}\r\nimport { ElementRef, EventEmitter } from '@angular/core';\r\nexport declare class BaseElement {\r\n    constructor(ref: ElementRef);\r\n    onCreate: EventEmitter<any>;\r\n    onReady: EventEmitter<any>;\r\n    onAttach: EventEmitter<any>;\r\n    onDetach: EventEmitter<any>;\r\n    nativeElement: any;\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\r\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\r\n    dispatchEvent(event: Event): boolean;\r\n    blur(): void;\r\n    click(): void;\r\n    focus(options?: FocusOptions): void;\r\n    /** @description Sets or gets the language. Used in conjunction with the property messages.  */\r\n    get locale(): string;\r\n    set locale(value: string);\r\n    /** @description Callback used to customize the format of the messages that are returned from the Localization Module. */\r\n    get localizeFormatFunction(): any;\r\n    set localizeFormatFunction(value: any);\r\n    /** @description Sets or gets an object specifying strings used in the widget that can be localized. Used in conjunction with the property locale.  */\r\n    get messages(): any;\r\n    set messages(value: any);\r\n    /** @description Sets or gets the value indicating whether the element is aligned to support locales using right-to-left fonts. */\r\n    get rightToLeft(): boolean;\r\n    set rightToLeft(value: boolean);\r\n    /** @description Determines the theme. Theme defines the look of the element */\r\n    get theme(): string;\r\n    set theme(value: string);\r\n}\r\nexport declare const Smart: any;\r\n"]}