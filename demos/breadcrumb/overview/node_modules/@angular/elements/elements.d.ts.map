{"version":3,"file":"elements.d.ts","sources":["elements.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license Angular v11.2.5\n * (c) 2010-2021 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Subscription } from 'rxjs';\r\nimport { Type } from '@angular/core';\r\nimport { Version } from '@angular/core';\r\n\r\n/**\r\n *  @description Creates a custom element class based on an Angular component.\r\n *\r\n * Builds a class that encapsulates the functionality of the provided component and\r\n * uses the configuration information to provide more context to the class.\r\n * Takes the component factory's inputs and outputs to convert them to the proper\r\n * custom element API and add hooks to input changes.\r\n *\r\n * The configuration's injector is the initial injector set on the class,\r\n * and used by default for each created instance.This behavior can be overridden with the\r\n * static property to affect all newly created instances, or as a constructor argument for\r\n * one-off creations.\r\n *\r\n * @see [Angular Elements Overview](guide/elements \"Turning Angular components into custom elements\")\r\n *\r\n * @param component The component to transform.\r\n * @param config A configuration that provides initialization information to the created class.\r\n * @returns The custom-element construction class, which can be registered with\r\n * a browser's `CustomElementRegistry`.\r\n *\r\n * @publicApi\r\n */\r\nexport declare function createCustomElement<P>(component: Type<any>, config: NgElementConfig): NgElementConstructor<P>;\r\n\r\n/**\r\n * Implements the functionality needed for a custom element.\r\n *\r\n * @publicApi\r\n */\r\nexport declare abstract class NgElement extends HTMLElement {\r\n    /**\r\n     * The strategy that controls how a component is transformed in a custom element.\r\n     */\r\n    protected abstract ngElementStrategy: NgElementStrategy;\r\n    /**\r\n     * A subscription to change, connect, and disconnect events in the custom element.\r\n     */\r\n    protected ngElementEventsSubscription: Subscription | null;\r\n    /**\r\n     * Prototype for a handler that responds to a change in an observed attribute.\r\n     * @param attrName The name of the attribute that has changed.\r\n     * @param oldValue The previous value of the attribute.\r\n     * @param newValue The new value of the attribute.\r\n     * @param namespace The namespace in which the attribute is defined.\r\n     * @returns Nothing.\r\n     */\r\n    abstract attributeChangedCallback(attrName: string, oldValue: string | null, newValue: string, namespace?: string): void;\r\n    /**\r\n     * Prototype for a handler that responds to the insertion of the custom element in the DOM.\r\n     * @returns Nothing.\r\n     */\r\n    abstract connectedCallback(): void;\r\n    /**\r\n     * Prototype for a handler that responds to the deletion of the custom element from the DOM.\r\n     * @returns Nothing.\r\n     */\r\n    abstract disconnectedCallback(): void;\r\n}\r\n\r\n/**\r\n * A configuration that initializes an NgElementConstructor with the\r\n * dependencies and strategy it needs to transform a component into\r\n * a custom element class.\r\n *\r\n * @publicApi\r\n */\r\nexport declare interface NgElementConfig {\r\n    /**\r\n     * The injector to use for retrieving the component's factory.\r\n     */\r\n    injector: Injector;\r\n    /**\r\n     * An optional custom strategy factory to use instead of the default.\r\n     * The strategy controls how the transformation is performed.\r\n     */\r\n    strategyFactory?: NgElementStrategyFactory;\r\n}\r\n\r\n/**\r\n * Prototype for a class constructor based on an Angular component\r\n * that can be used for custom element registration. Implemented and returned\r\n * by the {@link createCustomElement createCustomElement() function}.\r\n *\r\n * @see [Angular Elements Overview](guide/elements \"Turning Angular components into custom elements\")\r\n *\r\n * @publicApi\r\n */\r\nexport declare interface NgElementConstructor<P> {\r\n    /**\r\n     * An array of observed attribute names for the custom element,\r\n     * derived by transforming input property names from the source component.\r\n     */\r\n    readonly observedAttributes: string[];\r\n    /**\r\n     * Initializes a constructor instance.\r\n     * @param injector If provided, overrides the configured injector.\r\n     */\r\n    new (injector?: Injector): NgElement & WithProperties<P>;\r\n}\r\n\r\n/**\r\n * Underlying strategy used by the NgElement to create/destroy the component and react to input\r\n * changes.\r\n *\r\n * @publicApi\r\n */\r\nexport declare interface NgElementStrategy {\r\n    events: Observable<NgElementStrategyEvent>;\r\n    connect(element: HTMLElement): void;\r\n    disconnect(): void;\r\n    getInputValue(propName: string): any;\r\n    setInputValue(propName: string, value: string): void;\r\n}\r\n\r\n/**\r\n * Interface for the events emitted through the NgElementStrategy.\r\n *\r\n * @publicApi\r\n */\r\nexport declare interface NgElementStrategyEvent {\r\n    name: string;\r\n    value: any;\r\n}\r\n\r\n/**\r\n * Factory used to create new strategies for each NgElement instance.\r\n *\r\n * @publicApi\r\n */\r\nexport declare interface NgElementStrategyFactory {\r\n    /** Creates a new instance to be used for an NgElement. */\r\n    create(injector: Injector): NgElementStrategy;\r\n}\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport declare const VERSION: Version;\r\n\r\n/**\r\n * Additional type information that can be added to the NgElement class,\r\n * for properties that are added based\r\n * on the inputs and methods of the underlying component.\r\n *\r\n * @publicApi\r\n */\r\nexport declare type WithProperties<P> = {\r\n    [property in keyof P]: P[property];\r\n};\r\n\r\nexport { }\r\n"]}